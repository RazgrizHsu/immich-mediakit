#!/bin/bash

set -e

IMAGE_NAME="razgrizhsu/immich-mediakit"

SCRIPT_DIR="$(dirname "$0")"
if [ ! -f "$SCRIPT_DIR/pyproject.toml" ]; then
  echo "Error: pyproject.toml not found in $SCRIPT_DIR"
  exit 1
fi
VERSION=$(grep '^version = ' "$SCRIPT_DIR/pyproject.toml" | sed 's/version = "\(.*\)"/\1/')
if [ -z "$VERSION" ]; then
  echo "Warning: Could not read version from pyproject.toml, using 'latest'"
  VERSION="latest"
fi

echo "Updating version in src/conf.py to ${VERSION}..."
if [ -f "$SCRIPT_DIR/src/conf.py" ]; then
  sed -i.bak "s/version='[^']*'/version='${VERSION}'/" "$SCRIPT_DIR/src/conf.py"

  echo "Checking Python syntax and version reading..."
  cd "$SCRIPT_DIR"
  python3 -c "
import sys, os
sys.path.insert(0, './src')
expected_version = os.environ.get('EXPECTED_VERSION', '${VERSION}')
try:
    from conf import envs
    print('✓ conf.py syntax check passed')
    print(f'✓ Version read from conf.py: {envs.version}')
    if envs.version == expected_version:
        print('✓ Version update successful')
    else:
        print('✗ Version mismatch in conf.py')
        sys.exit(1)
except Exception as e:
    print(f'✗ Error checking conf.py: {str(e)}')
    sys.exit(1)
" EXPECTED_VERSION="${VERSION}"

  if [ $? -ne 0 ]; then
    echo "Error: Python syntax check or version read failed, restoring backup"
    mv "$SCRIPT_DIR/src/conf.py.bak" "$SCRIPT_DIR/src/conf.py"
    exit 1
  else
    rm -f "$SCRIPT_DIR/src/conf.py.bak"
    echo "✓ Version update completed successfully"
  fi
else
  echo "Warning: src/conf.py not found, skipping version update"
fi
TAG="${VERSION}"
UPLOAD=false
GPU_ONLY=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --upload)
      UPLOAD=true
      shift
      ;;
    --gpu)
      GPU_ONLY=true
      shift
      ;;
    --tag)
      TAG="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      echo "Usage: $0 [--upload] [--gpu] [--tag TAG]"
      echo "  --upload: Push images to Docker Hub"
      echo "  --gpu:    Build only CUDA version (can combine with --upload)"
      echo "  --tag:    Use custom tag instead of version from pyproject.toml"
      exit 1
      ;;
  esac
done

echo "Starting Docker image build process..."

cd "$(dirname "$0")"

if [ ! -f "requirements.txt" ]; then
  echo "Error: requirements.txt not found"
  exit 1
fi

if [ ! -f "requirements-cuda.txt" ]; then
  echo "Error: requirements-cuda.txt not found"
  exit 1
fi

if [ ! -f "Dockerfile" ]; then
  echo "Error: Dockerfile not found"
  exit 1
fi

if [ ! -d "src" ]; then
  echo "Error: src directory not found"
  exit 1
fi

BUILDER_NAME="budx"
if ! docker buildx inspect "$BUILDER_NAME" &>/dev/null; then
  echo "Docker Buildx builder '$BUILDER_NAME' not found. Creating it..."
  docker buildx create --name "$BUILDER_NAME" --driver docker-container --use
else
  echo "Using Docker Buildx builder '$BUILDER_NAME'."
  docker buildx use "$BUILDER_NAME"
fi

# Build both CPU and CUDA versions
build_image() {
  local device=$1
  local tag_suffix=$2
  local platforms=$3
  local load_flag=$4
  
  echo "Building ${device} image: ${IMAGE_NAME}:${TAG}${tag_suffix}"
  
  BUILD_ARGS=(
    "--build-arg" "MKIT_PORT=8086"
    "--build-arg" "DEVICE=${device}"
    "."
  )
  
  if [ "$load_flag" = "--load" ]; then
    if [ -z "$tag_suffix" ]; then
      # CPU version: only TAG for local builds
      docker buildx build \
        --platform "${platforms}" \
        -t "${IMAGE_NAME}:${TAG}" \
        "${BUILD_ARGS[@]}" \
        --load
    else
      # CUDA version: TAG-cuda for local builds
      docker buildx build \
        --platform "${platforms}" \
        -t "${IMAGE_NAME}:${TAG}${tag_suffix}" \
        "${BUILD_ARGS[@]}" \
        --load
    fi
  else
    if [ -z "$tag_suffix" ]; then
      # CPU version: TAG and latest
      docker buildx build \
        --platform "${platforms}" \
        -t "${IMAGE_NAME}:${TAG}" \
        -t "${IMAGE_NAME}:latest" \
        "${BUILD_ARGS[@]}" \
        --push
    else
      # CUDA version: TAG-cuda and latest-cuda
      docker buildx build \
        --platform "${platforms}" \
        -t "${IMAGE_NAME}:${TAG}${tag_suffix}" \
        -t "${IMAGE_NAME}:latest${tag_suffix}" \
        "${BUILD_ARGS[@]}" \
        --push
    fi
  fi
}

if [ "$UPLOAD" = true ]; then
  echo "Building multi-platform Docker images and pushing to Docker Hub"
  
  if [ "$GPU_ONLY" = true ]; then
    echo "Building CUDA version only"
    # Build CUDA version (AMD64 only for CUDA)
    build_image "cuda" "-cuda" "linux/amd64" ""
    echo "Successfully built and pushed CUDA version."
  else
    PLATFORMS="linux/amd64,linux/arm64/v8"
    
    # Build CPU version
    build_image "cpu" "" "${PLATFORMS}" ""
    
    # Build CUDA version (AMD64 only for CUDA)
    build_image "cuda" "-cuda" "linux/amd64" ""
    
    echo "Successfully built and pushed both CPU and CUDA versions for multiple platforms."
  fi

else
  echo "Building Docker images for current host platform and loading to local Docker daemon (not pushing)."
  echo "To build and push multi-platform images, run with --upload option."

  CURRENT_PLATFORM="linux/$(uname -m | sed 's/aarch64/arm64/' | sed 's/x86_64/amd64/')"
  
  if [ "$GPU_ONLY" = true ]; then
    echo "Building CUDA version only"
    # Always build for AMD64 since CUDA requires it, regardless of current platform
    build_image "cuda" "-cuda" "linux/amd64" "--load"
    echo "Successfully built and loaded CUDA image for local testing."
  else
    # Build CPU version
    build_image "cpu" "" "${CURRENT_PLATFORM}" "--load"
    
    # Build CUDA version for AMD64 (using buildx cross-compilation if needed)
    echo "Building CUDA version for AMD64 platform"
    build_image "cuda" "-cuda" "linux/amd64" "--load"
    
    echo "Successfully built and loaded images for local testing."
  fi
fi

echo "Build process completed."
